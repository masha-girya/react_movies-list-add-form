{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","isValid","useState","Math","random","toString","slice","id","touched","setToched","hasError","validUrl","setValidUrl","htmlFor","classNames","type","placeholder","event","target","includes","check","onBlur","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","isDisableButton","trim","length","urlValidator","url","pattern","RegExp","test","onSubmit","preventDefault","prevCount","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a62f1bd9.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValid?: (url: string) => boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  isValid = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  const [validUrl, setValidUrl] = useState(true);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={(event) => {\n            if (event.target.placeholder.includes('URL')) {\n              const check = isValid(event.target.value) || false;\n\n              setValidUrl(check);\n            }\n\n            return onChange(event.target.value);\n          }}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {(!validUrl && touched) && (\n        <p className=\"help is-danger\">{`${label} isn't valid URL`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => Movie[];\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n  const [validUrl, setValidUrl] = useState(true);\n\n  const isDisableButton\n  = !title.trim().length\n  || !imgUrl.trim().length\n  || !imdbUrl.trim().length\n  || !imdbId.trim().length\n  || !validUrl;\n\n  const urlValidator = (url: string) => {\n    // eslint-disable-next-line max-len\n    const pattern = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n\n    if (pattern.test(url)) {\n      setValidUrl(true);\n    } else {\n      setValidUrl(false);\n    }\n\n    return pattern.test(url);\n  };\n\n  const handleReset = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setCount((prevCount) => (prevCount + 1));\n    handleReset();\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(value) => setTitle(value)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(value) => setDescription(value)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(value) => setImgUrl(value)}\n        required\n        isValid={(url) => urlValidator(url)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(value) => setImdbUrl(value)}\n        required\n        isValid={(url) => urlValidator(url)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(value) => setImdbId(value)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisableButton}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie): Movie[] => {\n    setMovies((prevMovies: Movie[]) => (\n      [...prevMovies, movie]\n    ));\n\n    return movies;\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}